// 5/12 test cases passed
#include <iostream>
#include <bits/stdc++.h>
#include <algorithm>
using namespace std;

int N; // the number of souvenir shops
int X[100000];	// distance from the starting point
int Y[100000];	// the price of a mug

int Ord[100000];



void InputData(void){
	int i;
	cin >> N;
	for (i = 0; i < N; i++) {
		cin >> X[i] >> Y[i];
        Ord[i] = X[i];
	}
}

void OutputData(long long ans) {
	cout << ans << endl;
}

int main(void) {

	long long ans = 0;
	InputData();	// input
	
	// Write the code
    // int *p = Ord;
    // sort(p, p + N);
    // for (int i = 0; i < N - 1; ++i)
    // {
    //     int iX = -1, iY = -1;
    //     int rX = -1, rY = -1;
    //     // find 
    //     for (int j = 0; j < N; ++j) {
    //         if (Ord[i] == X[j]) {iX = j; iY = j;}
    //         if (Ord[i+1] = X[j]) {rX = j; rY = j;}
    //         if (rX != -1 && rY != -1) break;
    //     }
    //     if (Y[iY] > Y[rY]) ans += Y[rY];
    //     else ans += Y[iY];
    //     cout << 
    // }
    
    for (int i = 0; i < N -1; ++i)
    {
        if (Y[i] > Y[i+1]) ans += Y[i+1];
        else ans += Y[i];
    }
    ans += Y[N-1];
	
	OutputData(ans); // output
	return 0;
}

==================================================================
// only 2/12 passed
#include <iostream>
#include <bits/stdc++.h>
#include <algorithm>
using namespace std;

int N; // the number of souvenir shops
int X[100000];	// distance from the starting point
int Y[100000];	// the price of a mug

int Ord[100000];



void InputData(void){
	int i;
	cin >> N;
	for (i = 0; i < N; i++) {
		cin >> X[i] >> Y[i];
        Ord[i] = X[i];
	}
}

void OutputData(long long ans) {
	cout << ans << endl;
}

int main(void) {

	long long ans = 0;
	InputData();	// input
	
	// Write the code
    int *p = Ord;
    sort(p, p + N);
    int lastY = 0;
    for (int i = 0; i < N-1; ++i)
    {
        int iX = -1, iY = -1;
        int rX = -1, rY = -1;
        // find 
        // cout << i << " ";
        for (int j = 0; j < N; ++j) {
            if (Ord[i] == X[j]) {iX = j; iY = j;}
            if (Ord[i+1] == X[j]) {rX = j; rY = j;}
            if (iX != -1 && rX != -1) {
                lastY = rY;
                // cout << iY << " " << rY << endl;
                break;
            }
        }
        if (Y[iY] > Y[rY]) ans += Y[rY];
        else ans += Y[iY];
    }
    ans += Y[lastY];

    // for (int i = 0; i < N -1; ++i)
    // {
    //     if (Y[i] > Y[i+1]) ans += Y[i+1];
    //     else ans += Y[i];
    // }
    // ans += Y[N-1];
	
	OutputData(ans); // output
	return 0;
}